import esdl;
import uvm;
import std.stdio;
import std.string: format;


class riscv_instr_gen_config
{

   privileged_mode_t init_privileged_mode;
}



class riscv_instr
{
   static void create_csr_filter(riscv_instr_gen_config cfg)
  {
    include_reg.length = 0;
    exclude_reg.length = 0;
    if (cfg.enable_illegal_csr_instruction)
      {
	exclude_reg = implemented_csr;
      }
    else if (cfg.enable_access_invalid_csr_level)
      {
	include_reg = cfg.invalid_priv_mode_csrs;
      } else
      {
      // Use scratch register to avoid the side effect of modifying other privileged mode CSR.
      if (cfg.init_privileged_mode == privileged_mode_t.MACHINE_MODE)
	{
	  include_reg = [ privileged_reg_t.MSCRATCH];
	} else if (cfg.init_privileged_mode == privileged_mode_t.SUPERVISOR_MODE)
	{
	  include_reg = [privileged_reg_t.SSCRATCH];
	} else
	{
	  include_reg = [privileged_reg_t.USCRATCH];
	}
      }
  }
}

void main()
{
    auto cfg = new riscv_instr_gen_config;
    auto test = new Bar;
    cfg.init_privileged_mode = privileged_mode_t.MACHINE_MODE;
    
    test.build_basic_instruction_list(cfg);
    test.display();
       
}